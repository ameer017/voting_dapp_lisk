# **Summary** 
 The contract provides a basic implementation of a voting system on the Ethereum blockchain, allowing users to vote for candidates within a specified voting period. It includes features such as candidate registration, vote casting, and retrieval of voting status and results.

# **Contract Structure:**

--> The contract Voting is written in Solidity version 0.8.24.
--> It implements a voting system where users can vote for candidates.

# **Data Structures:**

--> The contract defines a Candidate struct to store candidate information, including their name and vote count.
--> Candidates are stored in an array named candidates, which is publicly accessible.

# **State Variables:**

--> candidates: An array of Candidate structs to store information about candidates.
--> owner: An address variable to store the address of the contract owner.
--> voters: A mapping to keep track of whether an address has already voted.
--> votingStart and votingEnd: Timestamps indicating the start and end of the voting period.


# **Constructor:**

--> The constructor initializes the contract by accepting an array of candidate names (_candidateNames) and the duration of the voting period in minutes (_durationMinutes).
--> It populates the candidates array with the provided candidate names and sets the voting period start and end timestamps.
--> The owner of the contract is set to the address of the message sender (the account deploying the contract).


# **Modifiers:**

--> onlyOwner: A modifier that restricts access to certain functions (e.g., addCandidate) to the contract owner only.


# **Functions:**

--> addCandidate: Allows the contract owner to add a new candidate to the candidates array.
--> vote: Allows users to cast their votes for a candidate by providing the index of the candidate in the candidates array.
--> getAllVotesOfCandidates: Returns an array of all candidates and their respective vote counts.
--> getVotingStatus: Returns a boolean indicating whether the voting period is currently active.
--> getRemainingTime: Returns the remaining time (in seconds) until the end of the voting period.


# **Error Handling:**

--> The contract includes error handling using require statements to ensure that certain conditions are met before executing functions.
--> For example, the vote function checks if the voter has already voted and if the provided candidate index is valid.


